TOPDIR := $(abspath $(dir $(lastword ${MAKEFILE_LIST})))

.PHONY: all clean clean_proto subdirs subdirs_clean

PROTOC := protoc

################################################################################
# NEED dependencies

ifdef NEED_AUTO_RULE_SO
NEED_BUILD_LIB := 1
NEED_AUTO_RULE_COM := 1
endif

ifdef NEED_AUTO_RULE
NEED_AUTO_RULE_COM := 1
endif

ifdef NEED_GTESTX
NEED_GFLAGS := 1
NEED_CXX_11 := 1
NEED_PTHREAD := 1
endif
################################################################################
ifneq "${MAKECMDGOALS}" "clean"

CXXFLAGS += -O2 -Wall -Werror

NEED_CXX0X := 1

#/////////////////////////////////////////////////////////////////////////////#
ifdef NEED_BOOST
NEED_PTHREAD := 1
CXXFLAGS += -I/usr/local/boost/include/
LDFLAGS += $(addprefix /usr/local/boost/lib/,libboost_system.a libboost_thread.a)
endif

ifdef NEED_DC_COMMON_LIB
NEED_COM := 1
CXXFLAGS += -I/usr/local/dc_commonlib/cppapi -I/usr/local/dc_commonlib/capi
LDFLAGS += /usr/local/dc_commonlib/cppapi/libcppapi.a /usr/local/dc_commonlib/capi/libcapi.a
endif

ifdef NEED_COM
CXXFLAGS +=  -I/usr/local/commlib/srv_framework/ -I/usr/local/commlib/baselib
LDFLAGS += -L/usr/local/commlib/srv_framework -lsrv_framework -L/usr/local/commlib/baselib -lcomm_oi
endif

ifdef NEED_BUILD_LIB
CXXFLAGS += -fPIC -shared
endif

ifdef NEED_PROTOBUF
NEED_PTHREAD := 1
LDFLAGS += -Wl,-dn -lprotobuf -Wl,-dy
endif

ifdef NEED_CXX0X
CXXFLAGS += -std=c++0x
endif

ifdef NEED_LIBCURL
NEED_LIBSSL := 1
NEED_LIBCRYPTO := 1
NEED_LIBZ := 1
NEED_LIBRT := 1
CXXFLAGS += -I${TOPDIR}/lib/libcurl/include
LDFLAGS += -L${TOPDIR}/lib/libcurl/lib -Wl,-dn -lcurl -Wl,-dy
endif

ifdef NEED_CXX_11
CXX_4_8_1 := /data/gcc-build-4.8.1/bin/g++
CXX := $(shell if [ -x ${CXX_4_8_1} ]; then echo ${CXX_4_8_1}; else echo g++; fi)
LDFLAGS += -Wl,-dn $(addprefix -l,stdc++) -Wl,-dy
endif

ifdef NEED_LIBHTTP_PARSER
CXXFLAGS += -I${TOPDIR}/lib/libhttp_parser
LDFLAGS += -L${TOPDIR}/lib/libhttp_parser -lhttp_parser
endif

ifdef NEED_PTHREAD
NEED_LIBRT := 1
NEED_LIBDL := 1
LDFLAGS += -pthread
endif

ifdef NEED_LIBSSL
NEED_LIBZ := 1
NEED_LIBRT := 1
LDFLAGS += -lssl
endif

ifdef NEED_LIBCRYPTO
LDFLAGS += -lcrypto
endif

ifdef NEED_LIBZ
LDFLAGS += -lz
endif

ifdef NEED_LIBRT
LDFLAGS += -lrt
endif

ifdef NEED_LIBDL
LDFLAGS += -ldl
endif

ifdef NEED_LIBRAPIDJSON
CXXFLAGS += -I${TOPDIR}/lib/librapidjson/include
endif

endif
################################################################################
ifdef NEED_AUTO_RULE_COM

SRC += $(wildcard *.c)
SRC += $(wildcard *.cpp)

C_OBJ += $(patsubst %.c,%.o,$(filter %.c,${SRC}))
CXX_OBJ += $(patsubst %.cpp,%.o,$(filter %.cpp,${SRC}))
OBJ += ${C_OBJ} ${CXX_OBJ}

SUBDIRS := $(dir $(realpath \
    $(shell find . -mindepth 2 -maxdepth 2 -name ?akefile)))

ifdef NEED_AUTO_RULE
TARGET += $(patsubst %.o,%,${OBJ})
endif

all: %: subdirs ${TARGET} 

subdirs: %:
	@set -e; for i in ${SUBDIRS}; do \
		${MAKE} -C $$i all; \
		done

CLEAN_FILE += ${TARGET} ${OBJ} ${DEP_DIR}

clean: %: subdirs_clean ${clean_proto}
ifneq "$(strip ${CLEAN_FILE})" ""
	${RM} -r ${CLEAN_FILE}
endif

subdirs_clean: %:
	@set -e; for i in ${SUBDIRS}; do \
		${MAKE} -C $$i clean; \
		done

endif

#//////////////////////////////////////////////////////////////////////////////#
# NEED_AUTO_RULE
ifdef NEED_AUTO_RULE

ifdef NEED_AUTO_RULE_SO
$(error "NEED_AUTO_RULE conflicts with NEED_AUTO_RULE_SO")
endif

${TARGET}: %: %.o
	${CXX} ${CXXFLAGS} -o $@ $< -Wl,--start-group ${LDFLAGS} -Wl,--end-group
endif

#//////////////////////////////////////////////////////////////////////////////#
ifdef NEED_AUTO_RULE_SO

ifdef NEED_AUTO_RULE
$(error "NEED_AUTO_RULE conflicts with NEED_AUTO_RULE_SO")
endif

ifeq "${TARGET}" ""
$(error "please set so target(e.g. TARGET := libtest.so)")
endif

${TARGET}: %: ${OBJ}
	${CXX} ${CXXFLAGS} -o $@ $^ -Wl,--start-group ${LDFLAGS} -Wl,--end-group

endif

################################################################################
# NEED_AUTO_DEP
#Usage: $(call mkdep)
define mkdep
	set -e
	${CXX} ${CXXFLAG} ${CXXFLAGS} $^ -MM -MF $@
endef

#Usage: $(call mkdir,dir_list)
mkdir = $(foreach c,$(1),$(shell set -e; \
    [ -d $(c) ] || mkdir -p $(c)))

ifdef NEED_AUTO_DEP

DEP_DIR := .dep
__mkdir := $(call mkdir,${DEP_DIR})

C_DEP += $(patsubst %.c,${DEP_DIR}/%.d,$(notdir $(filter %.c,${SRC} ${SRCS})))
CXX_DEP += $(patsubst %.cpp,${DEP_DIR}/%.d, \
  $(notdir $(filter %.cpp,${SRC} ${SRCS})))
DEP += ${C_DEP} ${CXX_DEP}

${C_DEP}: ${DEP_DIR}/%.d: %.c
	$(call mkdep)

${CXX_DEP}: ${DEP_DIR}/%.d: %.cpp
	$(call mkdep)

PB_DEP += $(patsubst %.pb.o,${DEP_DIR}/%.pb.d,$(notdir ${PB_OBJ} ${PB_OBJS}))

${PB_DEP}: ${DEP_DIR}/%.pb.d: %.pb.cc
	$(call mkdep)

ifneq "${MAKECMDGOALS}" "clean"
include ${DEP} ${PB_DEP}
endif

endif

################################################################################
# NEED_AUTO_RULE_PROTO
ifdef NEED_AUTO_RULE_PROTO
clean_proto := clean_proto

PROTOFILE += $(wildcard *.proto)
PROTOHEAD += $(patsubst %.proto, %.pb.h, $(PROTOFILE))
PROTOSRC += $(patsubst %.proto, %.pb.cc, $(PROTOFILE))
PROTOOBJ += $(patsubst %.proto, %.pb.o, $(PROTOFILE))

$(PROTOOBJ): %.pb.o: %.pb.cc 
	${CXX} $(CXXFLAGS) -c -o $@  $<

$(PROTOSRC): %.pb.cc : %.proto 
	${PROTOC} -I$(dir $<) $< --cpp_out=$(dir $<)

clean_proto: %:
	${RM} -r ${TARGET} $(PROTOOBJ) $(PROTOSRC) $(PROTOHEAD)
endif
################################################################################
include /usr/local/gflags/Makefile.env
include /usr/local/gtestx/Makefile.env
include /usr/local/gtest/Makefile.env
